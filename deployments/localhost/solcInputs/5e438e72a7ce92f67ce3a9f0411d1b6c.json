{
  "language": "Solidity",
  "sources": {
    "contracts/IdentityVerification.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract IdentityVerification {\n    struct Identity {\n        address user;\n        string name;\n        string email;\n        bool isVerified;\n        bool exists;\n    }\n\n    mapping(address => Identity) public identities;\n    address public admin;\n\n    enum Role { User, Admin, Verifier }\n    mapping(address => Role) public roles;\n\n    event IdentityAdded(address indexed user, string name, string email);\n    event IdentityUpdated(address indexed user, string name, string email);\n    event IdentityDeleted(address indexed user);\n    event IdentityVerified(address indexed user);\n    event IdentityRevoked(address indexed user);\n    event RoleAssigned(address indexed account, Role role);\n    event IdentityActionLogged(string action);\n\n    modifier onlyAdmin() {\n        require(roles[msg.sender] == Role.Admin, \"Only admin can perform this action\");\n        _;\n    }\n\n    modifier onlyVerifier() {\n        require(roles[msg.sender] == Role.Verifier, \"Only verifier can perform this action\");\n        _;\n    }\n\n    constructor() {\n        admin = msg.sender;\n        roles[msg.sender] = Role.Admin;\n        emit RoleAssigned(msg.sender, Role.Admin);\n    }\n\n    function assignRole(address account, Role role) public onlyAdmin {\n        roles[account] = role;\n        emit RoleAssigned(account, role);\n    }\n\n    function addIdentity(address _user, string memory _name, string memory _email) public onlyAdmin {\n        require(!identities[_user].exists, \"Identity already exists\");\n        identities[_user] = Identity({\n            user: _user,\n            name: _name,\n            email: _email,\n            isVerified: false,\n            exists: true\n        });\n        emit IdentityAdded(_user, _name, _email);\n        logIdentityAction(\"Identity Added\");\n    }\n\n    function updateIdentity(address _user, string memory _name, string memory _email) public onlyAdmin {\n        require(identities[_user].exists, \"Identity does not exist\");\n        identities[_user].name = _name;\n        identities[_user].email = _email;\n        emit IdentityUpdated(_user, _name, _email);\n        logIdentityAction(\"Identity Updated\");\n    }\n\n    function deleteIdentity(address _user) public onlyAdmin {\n        require(identities[_user].exists, \"Identity does not exist\");\n        delete identities[_user];\n        emit IdentityDeleted(_user);\n        logIdentityAction(\"Identity Deleted\");\n    }\n\n    function verifyIdentity(address _user) public onlyVerifier {\n        require(identities[_user].exists, \"Identity does not exist\");\n        identities[_user].isVerified = true;\n        emit IdentityVerified(_user);\n        logIdentityAction(\"Identity Verified\");\n    }\n\n    function revokeIdentity(address _user) public onlyAdmin {\n        require(identities[_user].exists, \"Identity does not exist\");\n        identities[_user].isVerified = false;\n        emit IdentityRevoked(_user);\n        logIdentityAction(\"Identity Revoked\");\n    }\n\n    function getIdentity(address _user) public view returns (Identity memory) {\n        require(identities[_user].exists, \"Identity does not exist\");\n        return identities[_user];\n    }\n\n    function isIdentityVerified(address _user) public view returns (bool) {\n        require(identities[_user].exists, \"Identity does not exist\");\n        return identities[_user].isVerified;\n    }\n\n    function logIdentityAction(string memory action) internal {\n        emit IdentityActionLogged(action);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}